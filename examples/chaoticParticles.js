/**
 * Visualize strange attractors generated by string params.
 *
 * Read more: https://mathworld.wolfram.com/StrangeAttractor.html
 */

import {
    CanvasGroup,
    Flow,
    Group,
    MathTex,
    Particle,
    Scene,
    Vector2,
    Vector3,
} from "../src/index";

const str2params = (str) => {
    const mapper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    const params = [];

    const step = 0.1;

    str.split("").forEach((c, i) => {
        const index = mapper.indexOf(c.toUpperCase());

        const param = (index - 12) * step;

        params[i] = param.toFixed(1);
    });

    return params;
};

const chaos =
    (params) =>
    ({ x, y }, t) => {
        const xx = x * x;
        const xy = x * y;
        const yy = y * y;

        // prettier-ignore
        const nx = params[0] * t + params[1] * x * t + params[2] * xx + params[3] * xy + params[4] * y * t + params[5] * yy;
        // prettier-ignore
        const ny = params[6] * t + params[7] * x * t + params[8] * xx + params[9] * xy + params[10] * y * t + params[11] * yy;
        const nz = 0;

        return new Vector3(nx, ny, nz);
    };

const equationGen = (params, label) => {
    const tex = `
            ${label}'      =
        ${params[0]}     t ${params[1] < 0 ? "" : "+"}
        ${params[1]} x   t ${params[2] < 0 ? "" : "+"}
        ${params[2]} x^2   ${params[3] < 0 ? "" : "+"}
        ${params[3]} xy    ${params[4] < 0 ? "" : "+"}
        ${params[4]} y   t ${params[5] < 0 ? "" : "+"}
        ${params[5]} y^2
    `;

    return tex;
};

// const stringParams = "FIRCDERRPVLD"; // cool
const stringParams = "MDVAIDOYHYEA"; // cool
// const stringParams = "GIIETPIQRRUL"; // hmmm

function chaoticParticles() {
    const scene = new Scene("chaotic-particles-scene");

    const params = str2params(stringParams);

    (() => {
        const group = new CanvasGroup("chaotic-particles", scene, {
            postprocessing: {
                afterimage: true,
            },
        });

        const tRange = [0.85, 2];
        const dt = 0.0005;

        let position = new Vector3(0.01, 0.01, 0.01);

        const particles = [...Array(10000)].map(() => {
            const particle = new Particle({
                group,
                position,
                radius: 0.5,
                scaleFactor: 5,
                CONFIG: {
                    fillColor: "#c8d3f5",
                },
            }).render();

            position = chaos(params)(position, tRange[0]);

            return particle;
        });

        const flowAnimations = particles.map((particle) => {
            return new Flow({
                cubicon: particle,
                functionDef: chaos(params),
                tRange,
                dt,
            });
        });

        group.play(flowAnimations);
    })();

    (() => {
        const group = new Group("chaos-equation", scene);

        const xPos = -16;

        new MathTex({
            group,
            position: new Vector2(xPos, 7.5),
            text: equationGen(params.slice(0, 6), "x"),
            CONFIG: {
                color: "#fff",
            },
        }).render();

        new MathTex({
            group,
            position: new Vector2(xPos, 6.5),
            text: equationGen(params.slice(6), "y"),
            CONFIG: {
                color: "#fff",
            },
        }).render();

        new MathTex({
            group,
            position: new Vector2(xPos, 5.5),
            text: `Code: \\ ${stringParams}`,
            CONFIG: {
                color: "#fff",
            },
        }).render();
    })();
}

chaoticParticles();
